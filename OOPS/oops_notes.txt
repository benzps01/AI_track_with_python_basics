# Objects has ->  1. Attributes(Characteristics)
                  2. Methods(Actions)

# Generic version of Objects is known as "CLASS".

# This class is like a blueprint to make as many objects as one wants using the common attributes
  predefined.

class - a blueprint consisting of methods and attributes

object - an instance of a class. It can help to think of objects as 
         something in the real world like a yellow pencil, a small dog, a blue shirt, etc. 
         However, as you'll see later in the lesson, objects can be more abstract.

attribute - a descriptor or characteristic. Examples would be color, length, size, etc. 
            These attributes can take on specific values like blue, 3 inches, large, etc.

method - an action that a class or object could take

OOP - a commonly used abbreviation for object-oriented programming

encapsulation - one of the fundamental ideas behind object-oriented programming is called encapsulation: 
                you can combine functions and data all into a single entity. In object-oriented programming, 
                this single entity is called a class. Encapsulation allows you to hide implementation 
                details much like how the scikit-learn package hides the implementation 
                of machine learning algorithms.

Self tells Python where to look in the computer's memory for the shirt_one object. 
And then Python changes the price of the shirt_one object. When you call 
the change_price method, shirt_one.change_price(12), self is implicitly passed in.

The word self is just a convention. You could actually use any other name as long as 
you are consistent; however, you should always use self rather than some other word 
or else you might confuse people.

